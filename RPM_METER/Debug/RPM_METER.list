
RPM_METER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800056c  0800056c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800056c  0800056c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800056c  0800056c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800056c  0800056c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800056c  0800056c  0000156c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000570  08000570  00001570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000574  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000170c  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000052b  00000000  00000000  0000373a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00003c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a3  00000000  00000000  00003d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fe1  00000000  00000000  00003e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013dc  00000000  00000000  0001cde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be13  00000000  00000000  0001e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a9fd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  000aa018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000aa23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  000aa261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000554 	.word	0x08000554

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000554 	.word	0x08000554

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4906      	ldr	r1, [pc, #24]	@ (80001fc <__NVIC_EnableIRQ+0x34>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	e000e100 	.word	0xe000e100

08000200 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000208:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <DelayMs+0x44>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800020e:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <DelayMs+0x48>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a0e      	ldr	r2, [pc, #56]	@ (800024c <DelayMs+0x4c>)
 8000214:	fba2 2303 	umull	r2, r3, r2, r3
 8000218:	099b      	lsrs	r3, r3, #6
 800021a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	68ba      	ldr	r2, [r7, #8]
 8000220:	fb02 f303 	mul.w	r3, r2, r3
 8000224:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000226:	bf00      	nop
 8000228:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <DelayMs+0x44>)
 800022a:	685a      	ldr	r2, [r3, #4]
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	1ad2      	subs	r2, r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	429a      	cmp	r2, r3
 8000234:	d3f8      	bcc.n	8000228 <DelayMs+0x28>
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	e0001000 	.word	0xe0001000
 8000248:	20000000 	.word	0x20000000
 800024c:	10624dd3 	.word	0x10624dd3

08000250 <ir_init>:

#include "IR.h"


void ir_init()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000254:	4b20      	ldr	r3, [pc, #128]	@ (80002d8 <ir_init+0x88>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000258:	4a1f      	ldr	r2, [pc, #124]	@ (80002d8 <ir_init+0x88>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(	BV(IR_PIN *2) | BV(IR_PIN * 2 + 1) );
 8000260:	4b1e      	ldr	r3, [pc, #120]	@ (80002dc <ir_init+0x8c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a1d      	ldr	r2, [pc, #116]	@ (80002dc <ir_init+0x8c>)
 8000266:	f023 0303 	bic.w	r3, r3, #3
 800026a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(	BV(IR_PIN *2) | BV(IR_PIN * 2 + 1) );
 800026c:	4b1b      	ldr	r3, [pc, #108]	@ (80002dc <ir_init+0x8c>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a1a      	ldr	r2, [pc, #104]	@ (80002dc <ir_init+0x8c>)
 8000272:	f023 0303 	bic.w	r3, r3, #3
 8000276:	60d3      	str	r3, [r2, #12]

	RCC-> AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000278:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <ir_init+0x88>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a16      	ldr	r2, [pc, #88]	@ (80002d8 <ir_init+0x88>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOD-> MODER &=  ~BV(GREEN_LED *2 + 1);
 8000284:	4b16      	ldr	r3, [pc, #88]	@ (80002e0 <ir_init+0x90>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a15      	ldr	r2, [pc, #84]	@ (80002e0 <ir_init+0x90>)
 800028a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800028e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= BV(GREEN_LED * 2);
 8000290:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <ir_init+0x90>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a12      	ldr	r2, [pc, #72]	@ (80002e0 <ir_init+0x90>)
 8000296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800029a:	6013      	str	r3, [r2, #0]
	GPIOD ->PUPDR &= ~(BV(GREEN_LED * 2 ) | BV(GREEN_LED * 2 + 1));
 800029c:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <ir_init+0x90>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a0f      	ldr	r2, [pc, #60]	@ (80002e0 <ir_init+0x90>)
 80002a2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80002a6:	60d3      	str	r3, [r2, #12]


	SYSCFG -> EXTICR[0] &= ~(BV(0) | BV(1) | BV(2) | BV(3) );
 80002a8:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <ir_init+0x94>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <ir_init+0x94>)
 80002ae:	f023 030f 	bic.w	r3, r3, #15
 80002b2:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= BV(IR_PIN);
 80002b4:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <ir_init+0x98>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0b      	ldr	r2, [pc, #44]	@ (80002e8 <ir_init+0x98>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]
	EXTI-> FTSR |= BV(IR_PIN);
 80002c0:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <ir_init+0x98>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a08      	ldr	r2, [pc, #32]	@ (80002e8 <ir_init+0x98>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI0_IRQn);
 80002cc:	2006      	movs	r0, #6
 80002ce:	f7ff ff7b 	bl	80001c8 <__NVIC_EnableIRQ>


}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40020c00 	.word	0x40020c00
 80002e4:	40013800 	.word	0x40013800
 80002e8:	40013c00 	.word	0x40013c00

080002ec <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR0)
 80002f0:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <EXTI0_IRQHandler+0x30>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d005      	beq.n	8000308 <EXTI0_IRQHandler+0x1c>
		{
			EXTI ->PR |= EXTI_PR_PR0;
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <EXTI0_IRQHandler+0x30>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a06      	ldr	r2, [pc, #24]	@ (800031c <EXTI0_IRQHandler+0x30>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6153      	str	r3, [r2, #20]
		}

	led_on();
 8000308:	f000 f80a 	bl	8000320 <led_on>
	DelayMs(50);
 800030c:	2032      	movs	r0, #50	@ 0x32
 800030e:	f7ff ff77 	bl	8000200 <DelayMs>
	led_off();
 8000312:	f000 f813 	bl	800033c <led_off>

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40013c00 	.word	0x40013c00

08000320 <led_on>:

void led_on(void){
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

	GPIOD->ODR |= BV(GREEN_LED);
 8000324:	4b04      	ldr	r3, [pc, #16]	@ (8000338 <led_on+0x18>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a03      	ldr	r2, [pc, #12]	@ (8000338 <led_on+0x18>)
 800032a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800032e:	6153      	str	r3, [r2, #20]


}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40020c00 	.word	0x40020c00

0800033c <led_off>:
void led_off(void){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	GPIOD ->ODR &= ~BV(GREEN_LED);
 8000340:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <led_off+0x18>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a03      	ldr	r2, [pc, #12]	@ (8000354 <led_off+0x18>)
 8000346:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800034a:	6153      	str	r3, [r2, #20]

}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40020c00 	.word	0x40020c00

08000358 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	ir_init();
 800035c:	f7ff ff78 	bl	8000250 <ir_init>
	timer_init();
 8000360:	f000 f854 	bl	800040c <timer_init>


	while(1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <main+0xc>

08000368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 800036c:	f000 f802 	bl	8000374 <DWT_Init>
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}

08000374 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000378:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <DWT_Init+0x58>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a13      	ldr	r2, [pc, #76]	@ (80003cc <DWT_Init+0x58>)
 800037e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000382:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000384:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <DWT_Init+0x58>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a10      	ldr	r2, [pc, #64]	@ (80003cc <DWT_Init+0x58>)
 800038a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800038e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <DWT_Init+0x5c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <DWT_Init+0x5c>)
 8000396:	f023 0301 	bic.w	r3, r3, #1
 800039a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <DWT_Init+0x5c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0b      	ldr	r2, [pc, #44]	@ (80003d0 <DWT_Init+0x5c>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80003a8:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <DWT_Init+0x5c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80003ae:	bf00      	nop
    __ASM volatile ("NOP");
 80003b0:	bf00      	nop
    __ASM volatile ("NOP");
 80003b2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80003b4:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <DWT_Init+0x5c>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	bf0c      	ite	eq
 80003bc:	2301      	moveq	r3, #1
 80003be:	2300      	movne	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	e000edf0 	.word	0xe000edf0
 80003d0:	e0001000 	.word	0xe0001000

080003d4 <__NVIC_EnableIRQ>:
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db0b      	blt.n	80003fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	f003 021f 	and.w	r2, r3, #31
 80003ec:	4906      	ldr	r1, [pc, #24]	@ (8000408 <__NVIC_EnableIRQ+0x34>)
 80003ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f2:	095b      	lsrs	r3, r3, #5
 80003f4:	2001      	movs	r0, #1
 80003f6:	fa00 f202 	lsl.w	r2, r0, r2
 80003fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	e000e100 	.word	0xe000e100

0800040c <timer_init>:
 */

#include "TIMER.h"

void timer_init()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

	RCC ->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <timer_init+0x58>)
 8000412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000414:	4a13      	ldr	r2, [pc, #76]	@ (8000464 <timer_init+0x58>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM2->PSC = PC;
 800041c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000420:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000424:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM2 ->ARR =1000-1;
 8000426:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800042a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800042e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2 ->CNT =0;
 8000430:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000434:	2200      	movs	r2, #0
 8000436:	625a      	str	r2, [r3, #36]	@ 0x24

	TIM2->DIER |= TIM_DIER_UIE;
 8000438:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM2_IRQn);
 8000458:	201c      	movs	r0, #28
 800045a:	f7ff ffbb 	bl	80003d4 <__NVIC_EnableIRQ>


}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40023800 	.word	0x40023800

08000468 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 800046c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	2b00      	cmp	r3, #0
 8000478:	d01a      	beq.n	80004b0 <TIM2_IRQHandler+0x48>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 800047a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800047e:	691b      	ldr	r3, [r3, #16]
 8000480:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000484:	f023 0301 	bic.w	r3, r3, #1
 8000488:	6113      	str	r3, [r2, #16]

        static uint8_t state = 0;
        if (state)
 800048a:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <TIM2_IRQHandler+0x4c>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <TIM2_IRQHandler+0x30>
            led_on();
 8000492:	f7ff ff45 	bl	8000320 <led_on>
 8000496:	e001      	b.n	800049c <TIM2_IRQHandler+0x34>
        else
            led_off();
 8000498:	f7ff ff50 	bl	800033c <led_off>

        state = !state;
 800049c:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <TIM2_IRQHandler+0x4c>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	bf0c      	ite	eq
 80004a4:	2301      	moveq	r3, #1
 80004a6:	2300      	movne	r3, #0
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	461a      	mov	r2, r3
 80004ac:	4b01      	ldr	r3, [pc, #4]	@ (80004b4 <TIM2_IRQHandler+0x4c>)
 80004ae:	701a      	strb	r2, [r3, #0]
    }
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000020 	.word	0x20000020

080004b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b8:	480d      	ldr	r0, [pc, #52]	@ (80004f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004bc:	f7ff ff54 	bl	8000368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c2:	490d      	ldr	r1, [pc, #52]	@ (80004f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c4:	4a0d      	ldr	r2, [pc, #52]	@ (80004fc <LoopForever+0xe>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000504 <LoopForever+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e6:	f000 f811 	bl	800050c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f7ff ff35 	bl	8000358 <main>

080004ee <LoopForever>:

LoopForever:
  b LoopForever
 80004ee:	e7fe      	b.n	80004ee <LoopForever>
  ldr   r0, =_estack
 80004f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004fc:	08000574 	.word	0x08000574
  ldr r2, =_sbss
 8000500:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000504:	20000024 	.word	0x20000024

08000508 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC_IRQHandler>
	...

0800050c <__libc_init_array>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	4d0d      	ldr	r5, [pc, #52]	@ (8000544 <__libc_init_array+0x38>)
 8000510:	4c0d      	ldr	r4, [pc, #52]	@ (8000548 <__libc_init_array+0x3c>)
 8000512:	1b64      	subs	r4, r4, r5
 8000514:	10a4      	asrs	r4, r4, #2
 8000516:	2600      	movs	r6, #0
 8000518:	42a6      	cmp	r6, r4
 800051a:	d109      	bne.n	8000530 <__libc_init_array+0x24>
 800051c:	4d0b      	ldr	r5, [pc, #44]	@ (800054c <__libc_init_array+0x40>)
 800051e:	4c0c      	ldr	r4, [pc, #48]	@ (8000550 <__libc_init_array+0x44>)
 8000520:	f000 f818 	bl	8000554 <_init>
 8000524:	1b64      	subs	r4, r4, r5
 8000526:	10a4      	asrs	r4, r4, #2
 8000528:	2600      	movs	r6, #0
 800052a:	42a6      	cmp	r6, r4
 800052c:	d105      	bne.n	800053a <__libc_init_array+0x2e>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	f855 3b04 	ldr.w	r3, [r5], #4
 8000534:	4798      	blx	r3
 8000536:	3601      	adds	r6, #1
 8000538:	e7ee      	b.n	8000518 <__libc_init_array+0xc>
 800053a:	f855 3b04 	ldr.w	r3, [r5], #4
 800053e:	4798      	blx	r3
 8000540:	3601      	adds	r6, #1
 8000542:	e7f2      	b.n	800052a <__libc_init_array+0x1e>
 8000544:	0800056c 	.word	0x0800056c
 8000548:	0800056c 	.word	0x0800056c
 800054c:	0800056c 	.word	0x0800056c
 8000550:	08000570 	.word	0x08000570

08000554 <_init>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr

08000560 <_fini>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr
